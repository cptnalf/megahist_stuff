<?xml version="1.0"?>
<doc>
    <assembly>
        <name>saastdlib</name>
    </assembly>
    <members>
        <member name="T:saastdlib.Timer">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.Timer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.Timer.start">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.Timer.stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:saastdlib.Timer.DeltaT">
            <summary>
            
            </summary>
        </member>
        <member name="P:saastdlib.Timer.TotalT">
            <summary>
            
            </summary>
        </member>
        <member name="P:saastdlib.Timer.Delta">
            <summary>
            
            </summary>
        </member>
        <member name="P:saastdlib.Timer.Total">
            <summary>
            
            </summary>
        </member>
        <member name="T:saastdlib.ArgParser">
            <summary>
            this supports parsing standard posix-like short options.
            </summary>
        </member>
        <member name="M:saastdlib.ArgParser.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.ArgParser.get_arg``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.ArgParser.get_arg``1(System.Char)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="opt"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.ArgParser.get_arg``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.ArgParser.add(saastdlib.BaseArg[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:saastdlib.ArgParser.add(saastdlib.BaseArg)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:saastdlib.ArgParser.parse_args(System.String[],System.Collections.Generic.List{System.Int32}@)">
            parse the command line arguments.
            @return true = no problems
                   false = errors or help requested (errors have already been reported)
        </member>
        <member name="M:saastdlib.ArgParser.print_help(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="opts"></param>
            <param name="prog_text"></param>
        </member>
        <member name="P:saastdlib.ArgParser.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:saastdlib.pair`2">
            <summary>
            
            </summary>
            <typeparam name="F"></typeparam>
            <typeparam name="S"></typeparam>
        </member>
        <member name="F:saastdlib.pair`2.first">
            <summary>
            
            </summary>
        </member>
        <member name="F:saastdlib.pair`2.second">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.pair`2.#ctor(`0,`1)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="s"></param>
        </member>
        <member name="M:saastdlib.pair`2.CompareTo(saastdlib.pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.pair`2.System#IComparable{saastdlib#pair{F@S}}#CompareTo(saastdlib.pair{`0,`1})">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.pair`2.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:saastdlib.ArgUShort">
            <summary>
            
            </summary>
        </member>
        <member name="T:saastdlib.Arg">
            <summary>
            a 'normal' argument
            it looks for the option value, and retrieves the string.
            </summary>
        </member>
        <member name="T:saastdlib.BaseArg">
            base class for an argument.
        </member>
        <member name="M:saastdlib.BaseArg.#ctor(System.Char,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_long"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
        </member>
        <member name="M:saastdlib.BaseArg.#ctor(System.Char,System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_long"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
        </member>
        <member name="M:saastdlib.BaseArg.#ctor(System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="n_long"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
        </member>
        <member name="M:saastdlib.BaseArg.#ctor(System.Char,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_long"></param>
            <param name="n_help"></param>
        </member>
        <member name="M:saastdlib.BaseArg.set_opt(System.Int32@,System.String[])">
            <summary>
            called when the option is found.
            this can then add another option or set internal data.
            </summary>
            <param name="args"></param>
            <param name="i"></param>
            <returns>
            false stops parsing
            true continues parsing.
            </returns>
        </member>
        <member name="P:saastdlib.BaseArg.opt">
            <summary>
            1 char option we're looking for, eg: -f */
            </summary>
        </member>
        <member name="P:saastdlib.BaseArg.optLong">
            <summary> multi-char name for this option, eg: --foo-bar </summary>
        </member>
        <member name="P:saastdlib.BaseArg.name">
            <summary> a helpful name for this option. </summary>
        </member>
        <member name="P:saastdlib.BaseArg.help">
            <summary> help text for this option. </summary>
        </member>
        <member name="M:saastdlib.Arg.#ctor(System.Char,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_optLong"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.Arg.#ctor(System.Char,System.String,System.String,System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_optLong"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.Arg.#ctor(System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="n_longOpt"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
        </member>
        <member name="M:saastdlib.Arg.set_opt(System.Int32@,System.String[])">
            <summary>
            
            </summary>
            <param name="argc"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.Arg.err(System.String)">
            <summary>
            report an error parsing the option value.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:saastdlib.Arg.op_Implicit(saastdlib.Arg)~System.String">
            <summary>
            convert this argument to it's value.
            </summary>
        </member>
        <member name="P:saastdlib.Arg.Data">
            <summary>the option value.</summary>
        </member>
        <member name="M:saastdlib.ArgUShort.#ctor(System.Char,System.String,System.String,System.UInt16)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.ArgUShort.#ctor(System.Char,System.String,System.String[],System.UInt16)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.ArgUShort.set_opt(System.Int32@,System.String[])">
            <summary>
            
            </summary>
            <param name="argc"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.ArgUShort.op_Implicit(saastdlib.ArgUShort)~System.UInt16">
            <summary>
            
            </summary>
            <param name="foo"></param>
            <returns></returns>
        </member>
        <member name="P:saastdlib.ArgUShort.UShort">
            <summary>
            
            </summary>
        </member>
        <member name="T:saastdlib.FlagArg">
            a flag argument. 
        </member>
        <member name="M:saastdlib.FlagArg.#ctor(System.Char)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
        </member>
        <member name="M:saastdlib.FlagArg.#ctor(System.Char,System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_help"></param>
            <param name="def_state"></param>
        </member>
        <member name="M:saastdlib.FlagArg.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="opt_long"></param>
            <param name="n_help"></param>
            <param name="def_state"></param>
        </member>
        <member name="M:saastdlib.FlagArg.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="opt_long"></param>
            <param name="n_help"></param>
            <param name="def_state"></param>
        </member>
        <member name="M:saastdlib.FlagArg.op_Implicit(saastdlib.FlagArg)~System.Boolean">
            <summary>
            
            </summary>
            <param name="foo"></param>
            <returns></returns>
        </member>
        <member name="P:saastdlib.FlagArg.On">
            <summary>
            
            </summary>
        </member>
        <member name="T:saastdlib.AsyncQueue`1">
            <summary>
            async queue with a contained semaphore, signaling how many available items there are
            in the queue.
            all functions/properties of this object are synchronized.
            </summary>
            <typeparam name="T">any type will suffice</typeparam>
        </member>
        <member name="M:saastdlib.AsyncQueue`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.AsyncQueue`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxWaiting"></param>
        </member>
        <member name="M:saastdlib.AsyncQueue`1.push(`0)">
            <summary>
            automagically deals with the semaphore.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:saastdlib.AsyncQueue`1.pop">
            <summary>
            does not do anything with the semaphore.
            </summary>
            <returns></returns>
        </member>
        <member name="P:saastdlib.AsyncQueue`1.Count">
            <summary>
            count of the number of objects left in the queue
            </summary>
        </member>
        <member name="P:saastdlib.AsyncQueue`1.ItemsWaiting">
            <summary>
            semaphore open while there are items waiting.
            </summary>
        </member>
        <member name="T:saastdlib.ArgInt">
            <summary>
            
            </summary>
        </member>
        <member name="M:saastdlib.ArgInt.#ctor(System.Char,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.ArgInt.#ctor(System.Char,System.String,System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="n_opt"></param>
            <param name="n_name"></param>
            <param name="n_help"></param>
            <param name="def"></param>
        </member>
        <member name="M:saastdlib.ArgInt.set_opt(System.Int32@,System.String[])">
            <summary>
            
            </summary>
            <param name="argc"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:saastdlib.ArgInt.op_Implicit(saastdlib.ArgInt)~System.Int32">
            <summary>
            
            </summary>
            <param name="foo"></param>
            <returns></returns>
        </member>
        <member name="P:saastdlib.ArgInt.Int">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
